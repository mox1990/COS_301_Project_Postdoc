
DROP DATABASE IF EXISTS PostDoc_DB;
CREATE DATABASE PostDoc_DB;

USE PostDoc_DB;

CREATE TABLE ADDRESSESS (
	_addressID BIGINT UNSIGNED NOT NULL,
	_country VARCHAR(50),
	_province VARCHAR(50),
	_town_city VARCHAR(50),
	_street VARCHAR(50),
	_streeNumber INT,
	_roomNumber VARCHAR(50),
	_zip_postalCode CHAR(6),
	
	PRIMARY KEY (_addressID)
);

CREATE TABLE LOCATIONS (
	_locationID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	_institution VARCHAR(250) NOT NULL,
	_faculty VARCHAR(250) NOT NULL,
	_department VARCHAR(250) NOT NULL,
	
	PRIMARY KEY (_locationID)
);

CREATE TABLE PERSONS (
	_systemID CHAR(9) NOT NULL,
	_password VARCHAR(50) NOT NULL,
	_title CHAR(10) NOT NULL,
	_fullName VARCHAR(250) NOT NULL,
	_surname VARCHAR(250) NOT NULL,
	_email VARCHAR(50) NOT NULL,
	_telephoneNumber CHAR(20),
	_workNumber CHAR(20),
	_faxNumber CHAR(20),
	_cellphoneNumber CHAR(20),	
	_addressLine1 BIGINT UNSIGNED NOT NULL,
	_upEmployee BOOLEAN NOT NULL,
	_locationID BIGINT UNSIGNED,
	
	PRIMARY KEY (_systemID),
	FOREIGN KEY (_locationID) REFERENCES LOCATIONS(_locationID),
	FOREIGN KEY (_addressLine1) REFERENCES ADDRESSESS(_addressID)
);

CREATE TABLE UP_EMPLOYEE_INFORMATION (
	_employeeID CHAR(9) NOT NULL,	
	_physicalAddress BIGINT UNSIGNED NOT NULL,
	_position VARCHAR(50) NOT NULL,
	_dateOfAppointment DATE NOT NULL,
	_appointmentStatus VARCHAR(50) NOT NULL,
	
	PRIMARY KEY (_employeeID),
	FOREIGN KEY (_employeeID) REFERENCES PERSONS(_systemID),
	FOREIGN KEY (_physicalAddress) REFERENCES ADDRESSESS(_addressID)
);

CREATE TABLE SECURITY_ROLES (
	_roleID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	_name VARCHAR(150) NOT NULL,
	_roleMask BIGINT UNSIGNED NOT NULL,
	
	PRIMARY KEY (_roleID)
);

CREATE TABLE PERSON_SECURITY_ROLE (
	_personID CHAR(9) NOT NULL,
	_roleID BIGINT UNSIGNED NOT NULL,
	
	PRIMARY KEY (_personID, _roleID),
	FOREIGN KEY (_personID) REFERENCES PERSONS(_systemID),
	FOREIGN KEY (_roleID) REFERENCES SECURITY_ROLES(_roleID)
);

CREATE TABLE NOTIFICATIONS (
	_notificationID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	_subject VARCHAR(200),
	_message TEXT,
	_timestamp DATETIME NOT NULL,
	_senderID CHAR(9) NOT NULL,
	_recieverID	CHAR(9) NOT NULL,
	
	PRIMARY KEY (_notificationID),
	FOREIGN KEY (_senderID) REFERENCES PERSONS(_systemID),
	FOREIGN KEY (_recieverID) REFERENCES PERSONS(_systemID)
);

CREATE TABLE RECOMMENDATION_REPORT (
	_reportID BIGINT UNSIGNED NOT NULL,
	_hodID CHAR(9) NOT NULL,
	_timestamp DATETIME NOT NULL,
	_content TEXT NOT NULL,
	
	PRIMARY KEY (_reportID),
	FOREIGN KEY (_hodID) REFERENCES PERSONS(_systemID)
);

CREATE TABLE ENDORSEMENTS (
	_endorsementID BIGINT UNSIGNED NOT NULL,
	_deanID CHAR(9) NOT NULL,
	_timestamp DATETIME NOT NULL,
	_rank INT UNSIGNED NOT NULL,
	_motivation TEXT NOT NULL,
	
	PRIMARY KEY (_endorsementID),
	FOREIGN KEY (_deanID) REFERENCES PERSONS(_systemID)
);

CREATE TABLE FUNDING_REPORTS (
	_reportID BIGINT UNSIGNED NOT NULL,
	_drisID CHAR(9) NOT NULL,
	_timestamp DATETIME NOT NULL,
	_fellowshipCost FLOAT,
	_travelCost FLOAT,
	_runningCost FLOAT,
	_operatingCost FLOAT,
	_equipmentCost FLOAT,
	_conferenceCost FLOAT,
	
	PRIMARY KEY (_reportID),
	FOREIGN KEY (_drisID) REFERENCES PERSONS(_systemID)
);

CREATE TABLE APPLICATIONS (
	_applicationID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	_type ENUM("New", "Renewal"),
	_status ENUM('open','refereed','finalised','recommended','endorsed','eligible','fundalbe'),
	_timestamp DATETIME NOT NULL,
	_awardDate DATETIME,
	_startDate DATE,
	_endDate DATE,
	_projectTitle VARCHAR(250),
	_information TEXT,
	_fellow CHAR(9) NOT NULL,
	_grantHolderID CHAR(9) NOT NULL,
	_locationID BIGINT UNSIGNED NOT NULL,	
	_endorsementID BIGINT UNSIGNED,
	_fundingReportID BIGINT UNSIGNED,
	
	
	PRIMARY KEY (_applicationID),
	FOREIGN KEY (_fellow) REFERENCES PERSONS(_systemID),
	FOREIGN KEY (_grantHolderID) REFERENCES PERSONS(_systemID),
	FOREIGN KEY (_locationID) REFERENCES LOCATIONS(_locationID),
	FOREIGN KEY (_endorsementID) REFERENCES ENDORSEMENTS(_endorsementID),
	FOREIGN KEY (_fundingReportID) REFERENCES FUNDING_REPORTS(_reportID)
);

CREATE TABLE NEW_APPLICATIONS (
	_applicationID BIGINT UNSIGNED NOT NULL,
	
	PRIMARY KEY (_applicationID),
	FOREIGN KEY (_applicationID) REFERENCES APPLICATIONS(_applicationID)
);

CREATE TABLE REFEREE_REPORTS (
	_reportID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	_refereeID CHAR(9) NOT NULL,
	_applicationID BIGINT UNSIGNED NOT NULL,
	_timestamp DATETIME NOT NULL,
	_content TEXT NOT NULL,
	
	PRIMARY KEY (_reportID),
	FOREIGN KEY (_applicationID) REFERENCES NEW_APPLICATIONS(_applicationID),
	FOREIGN KEY (_refereeID) REFERENCES PERSONS(_systemID)
);

CREATE TABLE PROGRESS_REPORTS (
	_reportID BIGINT UNSIGNED AUTO_INCREMENT,
	_timestamp DATETIME NOT NULL,
	_content TEXT NOT NULL,
	
	PRIMARY KEY (_reportID)
);

CREATE TABLE RENEWAL_APPLICATIONS (
	_applicationID BIGINT UNSIGNED NOT NULL,
	_progressReportID BIGINT UNSIGNED UNIQUE,
	
	PRIMARY KEY (_applicationID),
	FOREIGN KEY (_applicationID) REFERENCES APPLICATIONS(_applicationID),
	FOREIGN KEY (_progressReportID) REFERENCES PROGRESS_REPORTS(_reportID)	
);

CREATE TABLE COMMITTEE_MEETINGS (
	_meetingID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	_startDate DATETIME NOT NULL,
	_endDate DATETIME NOT NULL,
	PRIMARY KEY (_meetingID)
);

CREATE TABLE MINUTE_COMMENT (
	_commentID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	_meetingID BIGINT UNSIGNED NOT NULL,
	_timestamp DATETIME NOT NULL,
	_attendeeID CHAR(9) NOT NULL,
	_comment VARCHAR(500) NOT NULL,
	
	PRIMARY KEY (_commentID),
	FOREIGN KEY (_meetingID) REFERENCES COMMITTEE_MEETINGS(_meetingID),
	FOREIGN KEY (_attendeeID) REFERENCES PERSONS(_systemID)
);

#CREATE TABLE NEW_APPLICATIONS_COMMITT_MEETINGS (
#	_meetingID BIGINT UNSIGNED NOT NULL,
#	_newApplicationID BIGINT UNSIGNED NOT NULL,
#	
#	PRIMARY KEY (_meetingID, _newApplicationID),
#	FOREIGN KEY (_meetingID) REFERENCES COMMITTEE_MEETINGS(_meetingID),
#	FOREIGN KEY (_newApplicationID) REFERENCES NEW_APPLICATIONS(_applicationID)
#);

#CREATE TABLE RENEWAL_APPLICATIONS_COMMITT_MEETINGS (
#	_meetingID BIGINT UNSIGNED NOT NULL,
#	_renewalApplicationID BIGINT UNSIGNED NOT NULL,
	
#	PRIMARY KEY (_meetingID, _renewalApplicationID),
#	FOREIGN KEY (_meetingID) REFERENCES COMMITTEE_MEETINGS(_meetingID),
#	FOREIGN KEY (_renewalApplicationID) REFERENCES RENEWAL_APPLICATIONS(_applicationID)
#);

CREATE TABLE ATTENDENCE_LIST (	
	_meetingID BIGINT UNSIGNED NOT NULL,
	_attendeeID CHAR(9) NOT NULL,
	
	PRIMARY KEY (_meetingID, _attendeeID),
	FOREIGN KEY (_meetingID) REFERENCES COMMITTEE_MEETINGS(_meetingID),
	FOREIGN KEY (_attendeeID) REFERENCES PERSONS(_systemID)
);

CREATE TABLE COMMITTEE_MEETINGS_APPLICATIONS (
	_meetingID BIGINT UNSIGNED NOT NULL,
	_applicationID BIGINT UNSIGNED NOT NULL,
	
	PRIMARY KEY (_meetingID, _applicationID),
	FOREIGN KEY (_meetingID) REFERENCES COMMITTEE_MEETINGS(_meetingID),
	FOREIGN KEY (_applicationID) REFERENCES APPLICATIONS(_applicationID)
);


CREATE TABLE AUDIT_LOG (
	_entryID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	_personID CHAR(9) NOT NULL,
	_timestamp DATETIME NOT NULL,
	_action VARCHAR(100) NOT NULL,
	
	PRIMARY KEY (_entryID),
	FOREIGN KEY (_personID) REFERENCES PERSONS(_systemID)
);

CREATE TABLE CVS (
	_cvID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	_ownerID CHAR(9) NOT NULL,
	_idNumber CHAR(20) NOT NULL,
	_dateOfBirth DATE NOT NULL,
	_gender ENUM('male','female'),
	_citizenship CHAR(50),
	_nrfRating CHAR(4),
	_race CHAR(20),
	_recentInstitution VARCHAR(50),
	_researchOutput TEXT,
	_otherContributions TEXT,
	_additionalInformation TEXT,

	PRIMARY KEY(_cvID),
	FOREIGN KEY (_ownerID) REFERENCES PERSONS(_systemID)
);

CREATE TABLE ACADEMIC_QUALIFICATION (
	_qualificationID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	_cvID BIGINT UNSIGNED NOT NULL,
	_name VARCHAR(100),
	_fieldOfStudy VARCHAR(100),
	_instituation VARCHAR(100),
	_yearObtained DATE,
	_distinctions TINYINT UNSIGNED,

	PRIMARY KEY (_qualificationID),
	FOREIGN KEY (_cvID) REFERENCES CVS(_cvID)
);

CREATE TABLE EXPERIENCE (
	_experienceID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	_cvID BIGINT UNSIGNED NOT NULL,
	_capacity VARCHAR(100),
	_organisation VARCHAR(100),
	_startDate DATETIME NOT NULL,
	_endDate DATETIME NOT NULL,
	
	PRIMARY KEY (_experienceID),
	FOREIGN KEY (_cvID) REFERENCES CVS(_cvID)
);












